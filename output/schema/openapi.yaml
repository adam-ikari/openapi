openapi: 3.1.0
info:
  title: OpenAPI v2
  version: 2.0.0
tags:
  - name: Users
  - name: Emails
  - name: EmailGroups
  - name: WiFi
  - name: CertificateApi
paths:
  /api/v2/certificates/certificates:
    post:
      operationId: CertificateApi_uploadCertificate
      description: Upload a certificate file for WiFi authentication
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the upload was successful
                  certificateId:
                    type: string
                    description: The ID of the uploaded certificate
                  message:
                    type: string
                    description: Message describing the result
                required:
                  - success
                  - certificateId
                  - message
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - CertificateApi
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: The certificate file
                name:
                  type: string
                  description: Optional certificate name
                description:
                  type: string
                  description: Optional certificate description
              required:
                - file
            encoding:
              file:
                contentType: '*/*'
        description: The certificate file to upload
      security:
        - BearerAuth: []
    get:
      operationId: CertificateApi_listCertificates
      description: List certificates
      parameters:
        - $ref: '#/components/parameters/PaginationParams.offset'
        - $ref: '#/components/parameters/PaginationParams.limit'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - offset
                  - limit
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CertificateInfo'
                    description: Items
                  total:
                    type: integer
                    format: uint32
                    description: Total count of items
                  offset:
                    type: integer
                    format: uint32
                    description: Offset, default 0
                  limit:
                    type: integer
                    format: uint32
                    description: Limit, default 100
      tags:
        - CertificateApi
      security:
        - BearerAuth: []
  /api/v2/certificates/certificates/{id}:
    get:
      operationId: CertificateApi_getCertificate
      description: Get a specific certificate
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the certificate to get
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateInfo'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - CertificateApi
      security:
        - BearerAuth: []
    delete:
      operationId: CertificateApi_deleteCertificate
      description: Delete a certificate
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the certificate to delete
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the deletion was successful
                  message:
                    type: string
                    description: Message describing the result
                required:
                  - success
                  - message
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - CertificateApi
      security:
        - BearerAuth: []
  /api/v2/email-groups:
    get:
      operationId: EmailsGroupApi_list
      description: List email groups
      parameters:
        - $ref: '#/components/parameters/PaginationParams.offset'
        - $ref: '#/components/parameters/PaginationParams.limit'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - offset
                  - limit
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/EmailGroup'
                    description: Items
                  total:
                    type: integer
                    format: uint32
                    description: Total count of items
                  offset:
                    type: integer
                    format: uint32
                    description: Offset, default 0
                  limit:
                    type: integer
                    format: uint32
                    description: Limit, default 100
      tags:
        - EmailGroups
      security:
        - BearerAuth: []
    post:
      operationId: EmailsGroupApi_create
      description: Create a email group
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - EmailGroups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCreate'
      security:
        - BearerAuth: []
  /api/v2/email-groups/{id}:
    get:
      operationId: EmailsGroupApi_read
      description: Read a email group
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Email Group to read
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailGroup'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - EmailGroups
      security:
        - BearerAuth: []
    put:
      operationId: EmailsGroupApi_update
      description: Update a email group
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Email Group to update
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - EmailGroups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailGroupCreateOrUpdate'
      security:
        - BearerAuth: []
    delete:
      operationId: EmailsGroupApi_delete
      description: Delete a email group
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Email Group to delete
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - EmailGroups
      security:
        - BearerAuth: []
  /api/v2/emails:
    get:
      operationId: EmailsApi_list
      description: List emails
      parameters:
        - $ref: '#/components/parameters/PaginationParams.offset'
        - $ref: '#/components/parameters/PaginationParams.limit'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - offset
                  - limit
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Email'
                    description: Items
                  total:
                    type: integer
                    format: uint32
                    description: Total count of items
                  offset:
                    type: integer
                    format: uint32
                    description: Offset, default 0
                  limit:
                    type: integer
                    format: uint32
                    description: Limit, default 100
      tags:
        - Emails
      security:
        - BearerAuth: []
    post:
      operationId: EmailsApi_create
      description: Create a emails
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCreate'
      security:
        - BearerAuth: []
  /api/v2/emails/{id}:
    get:
      operationId: EmailsApi_read
      description: Read emails
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the email to read
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails
      security:
        - BearerAuth: []
    put:
      operationId: EmailsApi_update
      description: Update a emails
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the email to update
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCreateOrUpdate'
      security:
        - BearerAuth: []
    delete:
      operationId: EmailsApi_delete
      description: Delete a emails
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the email to delete
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails
      security:
        - BearerAuth: []
  /api/v2/users:
    get:
      operationId: UsersApi_list
      description: List users
      parameters:
        - $ref: '#/components/parameters/PaginationParams.offset'
        - $ref: '#/components/parameters/PaginationParams.limit'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - offset
                  - limit
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                    description: Items
                  total:
                    type: integer
                    format: uint32
                    description: Total count of items
                  offset:
                    type: integer
                    format: uint32
                    description: Offset, default 0
                  limit:
                    type: integer
                    format: uint32
                    description: Limit, default 100
      tags:
        - Users
      security:
        - BearerAuth: []
    post:
      operationId: UsersApi_create
      description: Create a users
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      security:
        - BearerAuth: []
  /api/v2/users/{id}:
    get:
      operationId: UsersApi_read
      description: Read users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to read
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
      security:
        - BearerAuth: []
    put:
      operationId: UsersApi_update
      description: Update a users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to update
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrUpdate'
      security:
        - BearerAuth: []
    delete:
      operationId: UsersApi_delete
      description: Delete a users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to delete
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/v2/wifi/configs:
    get:
      operationId: WiFiApi_listConfigs
      description: List WiFi configurations
      parameters:
        - $ref: '#/components/parameters/PaginationParams.offset'
        - $ref: '#/components/parameters/PaginationParams.limit'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - offset
                  - limit
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/WiFiConfig'
                    description: Items
                  total:
                    type: integer
                    format: uint32
                    description: Total count of items
                  offset:
                    type: integer
                    format: uint32
                    description: Offset, default 0
                  limit:
                    type: integer
                    format: uint32
                    description: Limit, default 100
      tags:
        - WiFi
      security:
        - BearerAuth: []
    post:
      operationId: WiFiApi_createConfig
      description: Create a WiFi configuration
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WiFiConfig'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - WiFi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WiFiConfig'
        description: The WiFi configuration to create
      security:
        - BearerAuth: []
  /api/v2/wifi/configs/{id}:
    get:
      operationId: WiFiApi_getConfig
      description: Get a specific WiFi configuration
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the WiFi configuration to get
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WiFiConfig'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - WiFi
      security:
        - BearerAuth: []
    put:
      operationId: WiFiApi_updateConfig
      description: Update a WiFi configuration
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the WiFi configuration to update
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WiFiConfig'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - WiFi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WiFiConfig'
        description: The WiFi configuration update data
      security:
        - BearerAuth: []
    delete:
      operationId: WiFiApi_deleteConfig
      description: Delete a WiFi configuration
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the WiFi configuration to delete
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - WiFi
      security:
        - BearerAuth: []
  /api/v2/wifi/disconnect:
    post:
      operationId: WiFiApi_disconnect
      description: Disconnect from current WiFi network
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  status:
                    $ref: '#/components/schemas/WiFiConnectionStatus'
                required:
                  - success
                  - message
                  - status
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - WiFi
      security:
        - BearerAuth: []
  /api/v2/wifi/networks:
    get:
      operationId: WiFiApi_scanNetworks
      description: Scan for available WiFi networks
      parameters:
        - name: force
          in: query
          required: true
          description: Whether to force a rescan instead of using cached results
          schema:
            type: boolean
            default: false
          explode: false
        - $ref: '#/components/parameters/PaginationParams.offset'
        - $ref: '#/components/parameters/PaginationParams.limit'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - offset
                  - limit
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/WiFiNetwork'
                    description: Items
                  total:
                    type: integer
                    format: uint32
                    description: Total count of items
                  offset:
                    type: integer
                    format: uint32
                    description: Offset, default 0
                  limit:
                    type: integer
                    format: uint32
                    description: Limit, default 100
      tags:
        - WiFi
      security:
        - BearerAuth: []
  /api/v2/wifi/networks/{id}:
    get:
      operationId: WiFiApi_getNetwork
      description: Get details of a specific WiFi network
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the WiFi network to get
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WiFiNetwork'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - WiFi
      security:
        - BearerAuth: []
  /api/v2/wifi/networks/{id}/connect:
    post:
      operationId: WiFiApi_connectNetwork
      description: Connect to a WiFi network
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the WiFi network to connect to
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  status:
                    $ref: '#/components/schemas/WiFiConnectionStatus'
                required:
                  - success
                  - message
                  - status
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - WiFi
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WiFiConnectRequest'
        description: Connection parameters
      security:
        - BearerAuth: []
  /api/v2/wifi/status:
    get:
      operationId: WiFiApi_getStatus
      description: Get current WiFi connection status
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/WiFiConnectionStatus'
                  connectedNetwork:
                    $ref: '#/components/schemas/WiFiNetwork'
                  message:
                    type: string
                required:
                  - status
                  - message
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - WiFi
      security:
        - BearerAuth: []
components:
  parameters:
    PaginationParams.limit:
      name: limit
      in: query
      required: false
      description: limit, default 100
      schema:
        type: integer
        format: uint32
        default: 100
      explode: false
    PaginationParams.offset:
      name: offset
      in: query
      required: false
      description: offset, default 0
      schema:
        type: integer
        format: uint32
        default: 0
      explode: false
  schemas:
    CertificateInfo:
      type: object
      required:
        - id
        - size
        - uploadTime
        - md5
      properties:
        id:
          type: string
          description: The ID of the certificate
        name:
          type: string
          description: The name of the certificate
        description:
          type: string
          description: The description of the certificate
        size:
          type: integer
          format: uint32
          description: The size of the certificate file in bytes
        uploadTime:
          type: string
          format: date-time
          description: The upload timestamp
        md5:
          type: string
          description: The MD5 hash of the certificate file
      description: Certificate information
    Email:
      type: object
      required:
        - id
        - email
        - authType
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: uint32
          description: The id of the email
          readOnly: true
        email:
          type: string
          pattern: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
          description: The email address
          examples:
            - user@example.com
        authType:
          allOf:
            - $ref: '#/components/schemas/EmailAuthType'
          description: The authentication type
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the email was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the email was updated
    EmailAuthType:
      type: string
      enum:
        - password
        - otp
        - totp
        - oauth2
      description: Email authentication type enum values
      x-enum-varnames:
        - password
        - otp
        - totp
        - oauth2
      x-ms-enum:
        values:
          - name: password
            value: password
            description: Password authentication
          - name: otp
            value: otp
            description: One time password authentication
          - name: totp
            value: totp
            description: Time-based one time password authentication
          - name: oauth2
            value: oauth2
            description: OAuth2 authentication
    EmailCreate:
      type: object
      required:
        - email
        - authType
        - createdAt
        - updatedAt
      properties:
        email:
          type: string
          pattern: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
          description: The email address
          examples:
            - user@example.com
        authType:
          allOf:
            - $ref: '#/components/schemas/EmailAuthType'
          description: The authentication type
        password:
          type: string
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
          format: password
          description: The password
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the email was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the email was updated
    EmailCreateOrUpdate:
      type: object
      required:
        - email
        - authType
        - createdAt
        - updatedAt
      properties:
        email:
          type: string
          pattern: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
          description: The email address
          examples:
            - user@example.com
        authType:
          allOf:
            - $ref: '#/components/schemas/EmailAuthType'
          description: The authentication type
        password:
          type: string
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
          format: password
          description: The password
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the email was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the email was updated
    EmailCreateOrUpdateItem:
      type: object
      required:
        - email
        - authType
        - createdAt
        - updatedAt
      properties:
        email:
          type: string
          pattern: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
          description: The email address
          examples:
            - user@example.com
        authType:
          allOf:
            - $ref: '#/components/schemas/EmailAuthType'
          description: The authentication type
        password:
          type: string
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
          format: password
          description: The password
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the email was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the email was updated
    EmailGroup:
      type: object
      required:
        - id
        - name
        - members
      properties:
        id:
          type: integer
          format: uint32
          description: The unique identifier of the group
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 32
          description: The name of the group
        members:
          type: array
          items:
            $ref: '#/components/schemas/Email'
          maxItems: 100
          description: The members of the group
    EmailGroupCreateOrUpdate:
      type: object
      required:
        - name
        - members
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 32
          description: The name of the group
        members:
          type: array
          items:
            $ref: '#/components/schemas/EmailCreateOrUpdateItem'
          maxItems: 100
          description: The members of the group
    Error:
      type: object
      required:
        - code
        - msg
      properties:
        code:
          allOf:
            - $ref: '#/components/schemas/StatusCode'
          description: The error code
        msg:
          type: string
          description: The error message
    Gender:
      type: string
      enum:
        - secret
        - male
        - female
      description: User gender enum values
      x-enum-varnames:
        - secret
        - male
        - female
      x-ms-enum:
        values:
          - name: secret
            value: secret
            description: unpublic gender
          - name: male
            value: male
            description: male gender
          - name: female
            value: female
            description: female gender
    StatusCode:
      type: number
      enum:
        - 100000
        - 100001
      description: Status Code
      x-enum-varnames:
        - SUCCESS
        - FAILURE
      x-ms-enum:
        values:
          - name: SUCCESS
            value: 100000
            description: success
          - name: FAILURE
            value: 100001
            description: failure
    User:
      type: object
      required:
        - id
        - name
        - age
        - gender
        - email
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: uint32
          description: The unique identifier of the user
          readOnly: true
        name:
          type: string
          minLength: 3
          maxLength: 32
          pattern: /^[a-zA-Z0-9_-]+$/
          description: The name of the user
        age:
          type: integer
          format: uint8
          minimum: 1
          maximum: 120
          description: The age of the user, min 1, max 120
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender of the user
        email:
          allOf:
            - $ref: '#/components/schemas/Email'
          description: The email of the user
        avatar:
          type: string
          format: uri
          description: The avatar of the user
          examples:
            - https://example.com/avatar.png
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the user was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the user was updated
    UserCreate:
      type: object
      required:
        - name
        - age
        - gender
        - email
        - password
        - createdAt
        - updatedAt
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 32
          pattern: /^[a-zA-Z0-9_-]+$/
          description: The name of the user
        age:
          type: integer
          format: uint8
          minimum: 1
          maximum: 120
          description: The age of the user, min 1, max 120
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender of the user
        email:
          allOf:
            - $ref: '#/components/schemas/EmailCreate'
          description: The email of the user
        avatar:
          type: string
          format: uri
          description: The avatar of the user
          examples:
            - https://example.com/avatar.png
        password:
          type: string
          format: password
          description: The password of the user
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the user was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the user was updated
    UserCreateOrUpdate:
      type: object
      required:
        - name
        - age
        - gender
        - email
        - password
        - createdAt
        - updatedAt
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 32
          pattern: /^[a-zA-Z0-9_-]+$/
          description: The name of the user
        age:
          type: integer
          format: uint8
          minimum: 1
          maximum: 120
          description: The age of the user, min 1, max 120
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender of the user
        email:
          allOf:
            - $ref: '#/components/schemas/EmailCreateOrUpdate'
          description: The email of the user
        avatar:
          type: string
          format: uri
          description: The avatar of the user
          examples:
            - https://example.com/avatar.png
        password:
          type: string
          format: password
          description: The password of the user
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the user was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the user was updated
    WiFiBand:
      type: string
      enum:
        - mixed
        - 2_4GHz
        - 5GHz
        - 6GHz
      description: WiFi frequency band enum values
      x-enum-varnames:
        - mixed
        - 2_4GHz
        - 5GHz
        - 6GHz
      x-ms-enum:
        values:
          - name: mixed
            value: mixed
            description: Mixed band (2.4GHz and 5GHz)
          - name: 2_4GHz
            value: 2_4GHz
            description: 2.4GHz band
          - name: 5GHz
            value: 5GHz
            description: Mixed band (2.4GHz and 5GHz)
          - name: 6GHz
            value: 6GHz
            description: Mixed band (2.4GHz and 5GHz)
    WiFiConfig:
      type: object
      required:
        - id
        - ssid
        - security
        - autoConnect
        - hidden
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: The unique identifier of the WiFi configuration
          readOnly: true
        ssid:
          type: string
          description: The SSID of the WiFi network to connect to
        security:
          allOf:
            - $ref: '#/components/schemas/WiFiSecurityType'
          description: The security type of the WiFi network
        password:
          type: string
          format: password
          description: The password for the WiFi network (required for secured networks). encrypted depends security type
        autoConnect:
          type: boolean
          description: Whether to connect automatically
          default: true
        hidden:
          type: boolean
          description: Whether this is a hidden network
          default: false
        status:
          allOf:
            - $ref: '#/components/schemas/WiFiConnectionStatus'
          description: The current connection status of this configuration
          default: disconnected
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the configuration was created
          readOnly: true
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the configuration was last updated
          readOnly: true
    WiFiConnectRequest:
      type: object
      required:
        - saveConfiguration
      properties:
        password:
          type: string
          format: password
          description: The password for the WiFi network (required for secured networks)
        saveConfiguration:
          type: boolean
          description: Whether to save this configuration for future use
          default: true
    WiFiConnectionStatus:
      type: string
      enum:
        - disconnected
        - connecting
        - connected
        - failed
        - disconnecting
      description: WiFi connection status
    WiFiNetwork:
      type: object
      required:
        - id
        - ssid
        - bssid
        - security
        - signalStrength
        - band
        - channel
        - hidden
        - isConnected
        - isSaved
        - lastSeen
      properties:
        id:
          type: string
          description: The unique identifier of the WiFi network
          readOnly: true
        ssid:
          type: string
          description: The SSID of the WiFi network
        bssid:
          type: string
          description: The BSSID of the WiFi network
        security:
          allOf:
            - $ref: '#/components/schemas/WiFiSecurityType'
          description: The security type of the WiFi network
        signalStrength:
          type: integer
          format: int32
          description: The signal strength in dBm
        band:
          allOf:
            - $ref: '#/components/schemas/WiFiBand'
          description: The WiFi frequency band
        channel:
          type: integer
          format: uint32
          description: The WiFi channel
        hidden:
          type: boolean
          description: Whether the network is hidden
        isConnected:
          type: boolean
          description: Whether this network is the currently connected one
        isSaved:
          type: boolean
          description: Whether this network has a saved configuration
        lastSeen:
          type: integer
          format: int32
          description: The timestamp when the network was last seen
          readOnly: true
    WiFiSecurityType:
      type: string
      enum:
        - none
        - wep
        - wpa
        - wpa2
        - wpa3
      description: WiFi security type enum values
      x-ms-enum:
        values:
          - name: none
            value: none
            description: No security
          - name: wep
            value: wep
            description: WEP encryption
          - name: wpa
            value: wpa
            description: WPA encryption
          - name: wpa2
            value: wpa2
            description: WPA2 encryption
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
