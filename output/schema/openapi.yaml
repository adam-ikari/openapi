openapi: 3.1.0
info:
  title: OpenAPI
  version: 2.0.0
tags:
  - name: Users API
  - name: Emails API
paths:
  /api/v2/emails:
    get:
      operationId: EmailsApi_list
      description: List users
      parameters:
        - name: offset
          in: query
          required: true
          description: The offset of the list, 0 means no offset, default is 0
          schema:
            type: integer
            format: uint32
            default: 0
          explode: false
        - name: limit
          in: query
          required: true
          description: The limit of the list, 0 means no limit, default is 10
          schema:
            type: integer
            format: uint32
            default: 10
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails API
      security:
        - BearerAuth: []
    post:
      operationId: EmailsApi_create
      description: Create a users
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCreate'
      security:
        - BearerAuth: []
  /api/v2/emails/{id}:
    get:
      operationId: EmailsApi_read
      description: Read users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Email to read
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails API
      security:
        - BearerAuth: []
    put:
      operationId: EmailsApi_update
      description: Update a users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Email to update
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailCreateOrUpdate'
      security:
        - BearerAuth: []
    delete:
      operationId: EmailsApi_delete
      description: Delete a users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Email to delete
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Emails API
      security:
        - BearerAuth: []
  /api/v2/users:
    get:
      operationId: UsersApi_list
      description: List users
      parameters:
        - name: offset
          in: query
          required: true
          description: The offset of the list, 0 means no offset, default is 0
          schema:
            type: integer
            format: uint32
            default: 0
          explode: false
        - name: limit
          in: query
          required: true
          description: The limit of the list, 0 means no limit, default is 10
          schema:
            type: integer
            format: uint32
            default: 10
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users API
      security:
        - BearerAuth: []
    post:
      operationId: UsersApi_create
      description: Create a users
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      security:
        - BearerAuth: []
  /api/v2/users/{id}:
    get:
      operationId: UsersApi_read
      description: Read users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to read
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users API
      security:
        - BearerAuth: []
    put:
      operationId: UsersApi_update
      description: Update a users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to update
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateOrUpdate'
      security:
        - BearerAuth: []
    delete:
      operationId: UsersApi_delete
      description: Delete a users
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user to delete
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Users API
      security:
        - BearerAuth: []
components:
  schemas:
    Email:
      type: object
      required:
        - id
        - email
        - authMethod
        - token
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: uint32
          description: The id of the email
        email:
          type: string
          pattern: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
          description: The email address
        authMethod:
          allOf:
            - $ref: '#/components/schemas/EmailAuthMethod'
          description: The authentication method
        token:
          type: string
          format: password
          description: The authentication token
          readOnly: true
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the email was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the email was updated
    EmailAuthMethod:
      type: number
      enum:
        - 0
        - 1
        - 2
        - 3
      description: Email authentication method
      x-enum-varnames:
        - password
        - otp
        - totp
        - oauth2
      x-ms-enum:
        values:
          - name: password
            value: 0
            description: Password authentication
          - name: otp
            value: 1
            description: One time password authentication
          - name: totp
            value: 2
            description: Time-based one time password authentication
          - name: oauth2
            value: 3
            description: OAuth2 authentication
    EmailCreate:
      type: object
      required:
        - id
        - email
        - authMethod
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: uint32
          description: The id of the email
        email:
          type: string
          pattern: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
          description: The email address
        authMethod:
          allOf:
            - $ref: '#/components/schemas/EmailAuthMethod'
          description: The authentication method
        password:
          type: string
          format: password
          description: The password
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the email was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the email was updated
    EmailCreateOrUpdate:
      type: object
      required:
        - id
        - email
        - authMethod
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: uint32
          description: The id of the email
        email:
          type: string
          pattern: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
          description: The email address
        authMethod:
          allOf:
            - $ref: '#/components/schemas/EmailAuthMethod'
          description: The authentication method
        password:
          type: string
          format: password
          description: The password
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the email was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the email was updated
    EmailList:
      type: object
      required:
        - items
        - total
        - offset
        - limit
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Email'
          description: The list of emails
        total:
          type: integer
          format: uint32
          description: The total number of emails
        offset:
          type: integer
          format: uint32
          description: The offset to fetch the list, 0 means no offset
        limit:
          type: integer
          format: uint32
          description: The limit to fetch the list, 0 means no limit
    Error:
      type: object
      required:
        - code
        - msg
      properties:
        code:
          allOf:
            - $ref: '#/components/schemas/StatusCode'
          description: The error code
        msg:
          type: string
          description: The error message
    Gender:
      type: number
      enum:
        - 0
        - 1
        - 2
      description: Gender enum values
      x-enum-varnames:
        - secret
        - male
        - female
      x-ms-enum:
        values:
          - name: secret
            value: 0
            description: unpublic gender
          - name: male
            value: 1
            description: male gender
          - name: female
            value: 2
            description: female gender
    StatusCode:
      type: number
      enum:
        - 100000
        - 100001
      description: Status Code
      x-ms-enum:
        values:
          - name: SUCCESS
            value: 100000
            description: success
          - name: FAILURE
            value: 100001
            description: failure
    User:
      type: object
      required:
        - id
        - name
        - age
        - gender
        - email
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: uint32
          description: The unique identifier of the user
        name:
          type: string
          minLength: 3
          maxLength: 32
          pattern: /^[a-zA-Z0-9_-]+$/
          description: The name of the user
        age:
          type: integer
          format: uint8
          minimum: 1
          maximum: 120
          description: The age of the user, min 1, max 120
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender of the user
        email:
          allOf:
            - $ref: '#/components/schemas/Email'
          description: The email of the user
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the user was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the user was updated
    UserCreate:
      type: object
      required:
        - id
        - name
        - age
        - gender
        - email
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: uint32
          description: The unique identifier of the user
        name:
          type: string
          minLength: 3
          maxLength: 32
          pattern: /^[a-zA-Z0-9_-]+$/
          description: The name of the user
        age:
          type: integer
          format: uint8
          minimum: 1
          maximum: 120
          description: The age of the user, min 1, max 120
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender of the user
        email:
          allOf:
            - $ref: '#/components/schemas/EmailCreate'
          description: The email of the user
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the user was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the user was updated
    UserCreateOrUpdate:
      type: object
      required:
        - id
        - name
        - age
        - gender
        - email
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: uint32
          description: The unique identifier of the user
        name:
          type: string
          minLength: 3
          maxLength: 32
          pattern: /^[a-zA-Z0-9_-]+$/
          description: The name of the user
        age:
          type: integer
          format: uint8
          minimum: 1
          maximum: 120
          description: The age of the user, min 1, max 120
        gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
          description: The gender of the user
        email:
          allOf:
            - $ref: '#/components/schemas/EmailCreateOrUpdate'
          description: The email of the user
        createdAt:
          type: integer
          format: int32
          description: The timestamp when the user was created
        updatedAt:
          type: integer
          format: int32
          description: The timestamp when the user was updated
    UserList:
      type: object
      required:
        - items
        - total
        - offset
        - limit
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: The list of users
        total:
          type: integer
          format: uint32
          description: The total number of users
        offset:
          type: integer
          format: uint32
          description: The offset to fetch the list, 0 means no offset
        limit:
          type: integer
          format: uint32
          description: The limit to fetch the list, 0 means no limit
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
