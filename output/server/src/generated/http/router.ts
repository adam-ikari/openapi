// Generated by Microsoft TypeSpec

import * as http from "node:http";

import * as serverRaw from "./operations/server-raw.js";

import { parseHeaderValueParameters } from "../helpers/header.js";

import {
  RouterOptions,
  createPolicyChain,
  createPolicyChainForRoute,
  HttpContext,
} from "../helpers/router.js";

export interface OpenApiServiceRouter {
  /**
   * Dispatches the request to the appropriate service based on the request path.
   *
   * This member function may be used directly as a handler for a Node HTTP server.
   *
   * @param request - The incoming HTTP request.
   * @param response - The outgoing HTTP response.
   */
  dispatch(request: http.IncomingMessage, response: http.ServerResponse): void;
}

export function createOpenApiServiceRouter(
  options: RouterOptions<{}> = {},
): OpenApiServiceRouter {
  const __onRequestNotFound_2 =
    options.onRequestNotFound ??
    ((ctx) => {
      ctx.response.statusCode = 404;
      ctx.response.setHeader("Content-Type", "text/plain");
      ctx.response.end("Not Found");
    });

  const __onInvalidRequest_3 =
    options.onInvalidRequest ??
    ((ctx, route, error) => {
      ctx.response.statusCode = 400;
      ctx.response.setHeader("Content-Type", "application/json");
      ctx.response.end(JSON.stringify({ error }));
    });

  const __onInternalError_4 =
    options.onInternalError ??
    ((ctx, error) => {
      ctx.response.statusCode = 500;
      ctx.response.setHeader("Content-Type", "text/plain");
      ctx.response.end("Internal server error.");
    });

  const __routePolicies_5 = options.routePolicies ?? {};

  const __routeHandlers_6 = {} as const;

  const dispatch = createPolicyChain(
    "OpenApiServiceRouterDispatch",
    options.policies ?? [],
    async function (ctx, request, response) {
      const url = new URL(request.url!, `http://${request.headers.host}`);
      let path = url.pathname;

      if (path.length === 0) {
        return ctx.errorHandlers.onRequestNotFound(ctx);
      } else {
        return ctx.errorHandlers.onRequestNotFound(ctx);
      }

      return ctx.errorHandlers.onRequestNotFound(ctx);
    },
  );

  const __errorHandlers_7 = {
    onRequestNotFound: __onRequestNotFound_2,
    onInvalidRequest: __onInvalidRequest_3,
    onInternalError: __onInternalError_4,
  };
  return {
    dispatch(request, response) {
      const ctx = { request, response, errorHandlers: __errorHandlers_7 };
      return dispatch(ctx, request, response).catch((e) =>
        __onInternalError_4(ctx, e),
      );
    },
  };
}
