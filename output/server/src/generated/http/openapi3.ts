// Generated by Microsoft TypeSpec

export const openApiDocument = {
  openapi: "3.0.0",
  info: { title: "OpenAPI", version: "0.0.0" },
  tags: [{ name: "Users" }],
  paths: {
    "/users": {
      get: {
        operationId: "Users_list",
        description: "List users",
        parameters: [],
        responses: {
          "200": {
            description: "The request has succeeded.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/UserList" },
              },
            },
          },
          default: {
            description: "An unexpected error response.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/Error" },
              },
            },
          },
        },
        tags: ["Users"],
        security: [{ BearerAuth: [] }],
      },
      post: {
        operationId: "Users_create",
        description: "Create a users",
        parameters: [],
        responses: {
          "200": {
            description: "The request has succeeded.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/User" },
              },
            },
          },
          default: {
            description: "An unexpected error response.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/Error" },
              },
            },
          },
        },
        tags: ["Users"],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: { $ref: "#/components/schemas/User" },
            },
          },
        },
        security: [{ BearerAuth: [] }],
      },
    },
    "/users/{id}": {
      get: {
        operationId: "Users_read",
        description: "Read users",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "The id of the user to read",
            schema: { type: "string" },
          },
        ],
        responses: {
          "200": {
            description: "The request has succeeded.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/User" },
              },
            },
          },
          default: {
            description: "An unexpected error response.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/Error" },
              },
            },
          },
        },
        tags: ["Users"],
        security: [{ BearerAuth: [] }],
      },
      put: {
        operationId: "Users_update",
        description: "Update a users",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "The id of the user to update",
            schema: { type: "string" },
          },
        ],
        responses: {
          "200": {
            description: "The request has succeeded.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/User" },
              },
            },
          },
          default: {
            description: "An unexpected error response.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/Error" },
              },
            },
          },
        },
        tags: ["Users"],
        requestBody: {
          required: true,
          content: {
            "application/json": {
              schema: { $ref: "#/components/schemas/User" },
            },
          },
        },
        security: [{ BearerAuth: [] }],
      },
      delete: {
        operationId: "Users_delete",
        description: "Delete a users",
        parameters: [
          {
            name: "id",
            in: "path",
            required: true,
            description: "The id of the user to delete",
            schema: { type: "string" },
          },
        ],
        responses: {
          "204": {
            description:
              "There is no content to send for this request, but the headers may be useful. ",
          },
          default: {
            description: "An unexpected error response.",
            content: {
              "application/json": {
                schema: { $ref: "#/components/schemas/Error" },
              },
            },
          },
        },
        tags: ["Users"],
        security: [{ BearerAuth: [] }],
      },
    },
  },
  components: {
    schemas: {
      Gender: {
        type: "string",
        enum: ["secret", "male", "female"],
        description: "The enum of the gender",
      },
      User: {
        type: "object",
        required: ["id", "name", "age", "gender"],
        properties: {
          id: {
            type: "string",
            description: "The unique identifier of the user",
          },
          name: {
            type: "string",
            minLength: 3,
            maxLength: 32,
            description: "The name of the user",
          },
          age: {
            type: "integer",
            format: "uint8",
            minimum: 1,
            maximum: 120,
            description: "The age of the user",
          },
          gender: {
            allOf: [{ $ref: "#/components/schemas/Gender" }],
            description: "The gender of the user",
          },
        },
      },
      UserList: {
        type: "object",
        required: ["items"],
        properties: {
          items: {
            type: "array",
            items: { $ref: "#/components/schemas/User" },
            description: "The list of users",
          },
        },
      },
      Error: {
        type: "object",
        required: ["code", "msg"],
        properties: {
          code: {
            type: "integer",
            format: "int32",
            description: "The error code",
          },
          msg: { type: "string", description: "The error message" },
        },
      },
    },
    securitySchemes: { BearerAuth: { type: "http", scheme: "Bearer" } },
  },
};
